{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "docker: bash into container",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "docker exec -it ${input:containerID} bash"],
      "problemMatcher": []
    },
    {
      "label": "docker: ctop",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock nicolaka/netshoot ctop"],
      "problemMatcher": []
    },
    {
      "label": "docker: log (follow) container",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "docker logs -f ${input:containerID}"],
      "problemMatcher": []
    },
    {
      "label": "docker: log (last 10 lines) container",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "docker logs --tail 10 ${input:containerID}"],
      "problemMatcher": []
    },
    {
      "label": "docker: kill all running containers",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "docker kill $(docker ps -q)"]
    },
    {
      "label": "docker: docker status all (pretty extra info)",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "echo -e \"ID,Image,Command,CreatedAt,RunningFor,Ports,Status,Size,Names,Labels,Mounts,Networks\n$(docker ps --format \"{{.ID}},{{.Image}},{{.Command}},{{.CreatedAt}},{{.RunningFor}},{{.Ports}},{{.Status}},{{.Size}},{{.Names}},{{.Labels}},{{.Mounts}},{{.Networks}}\")\" | tty-table "
      ]
    },
    {
      "label": "docker: docker status by ancestor (pretty extra info)",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "echo -e \"ID,Image,Command,CreatedAt,RunningFor,Ports,Status,Size,Names,Labels,Mounts,Networks\n$(docker ps --filter \"ancestor=${input:image}\" --format \"{{.ID}},{{.Image}},{{.Command}},{{.CreatedAt}},{{.RunningFor}},{{.Ports}},{{.Status}},{{.Size}},{{.Names}},{{.Labels}},{{.Mounts}},{{.Networks}}\")\" | tty-table "
      ]
    },
    {
      "label": "docker: docker status all (pretty)",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "echo -e \"ID,Image,Ports,Status\n$(docker ps --format \"{{.ID}},{{.Image}},{{.Ports}},{{.Status}}\")\"  | tty-table"
      ]
    },
    {
      "label": "docker: docker status by ancestor (pretty)",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "echo -e \"ID,Image,Ports,Status\n$(docker ps --filter \"ancestor=${input:image}\" --format \"{{.ID}},{{.Image}},{{.Ports}},{{.Status}}\")\"  | tty-table"
      ]
    },
    {
      "label": "docker: ls networks (pretty)",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "echo -e \"ID,Name,Driver,Scope\n$(docker network ls --format \"{{.ID}},{{.Name}},{{.Driver}},{{.Scope}}\")\" | tty-table"
      ]
    },
    {
      "label": "docker: print networks of all containers",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "for containerid in $(docker ps -q); do echo -e \"\n$(tput setaf 1)Container id: $containerid\" && docker inspect $containerid | jq .[0].NetworkSettings.Networks; done"
      ]
    },
    {
      "label": "docker: print network settings of a container",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "docker inspect ${input:containerID} | jq .[0].NetworkSettings"
      ]
    },
    {
      "label": "docker: print volume inspect of all volumes",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "for volume in $(docker volume ls --format \"{{.Name}}\") ; do echo -e \"\\n\\n$(tput setaf 1)Volume: $volume:\" && docker volume inspect $volume | jq ; done"
      ]
    },
    {
      "label": "docker: remove all containers by name",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "docker rm -f $(docker ps -a -f name=${input:containerName} -q)"
      ]
    },
    {
      "label": "docker: remove all untagged images",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "for img in $(docker image ls | grep \"<none>\" | awk '\"'\"'{ print $3 }'\"'\"' ) ; do docker image rm -f $img ; done"
      ]
    },
    {
      "label": "docker: remove all dangling images",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "docker rmi $(docker images -f \"dangling=true\" -q)"]
    },
    {
      "label": "docker: remove all stopped containers",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "docker rm $(docker ps -a -q)"]
    },
    {
      "label": "docker: stopp all containers",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "docker stop $(docker ps -a -q)"]
    }
  ],
  "inputs": [
    {
      "type": "pickString",
      "id": "template",
      "description": "unused parameter",
      "options": []
    },
    {
      "type": "promptString",
      "description": "The id of the container you would like to work with:",
      "default": "123",
      "id": "containerID"
    },
    {
      "type": "promptString",
      "description": "The image by which to filter",
      "default": "Enter the exact image name by which to filter",
      "id": "image"
    },
    {
      "type": "promptString",
      "description": "The container name by which to filter",
      "default": "Enter part of container name",
      "id": "containerName"
    }
  ]
}
